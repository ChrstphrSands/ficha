{"ast":null,"code":"import _objectSpread from \"D:\\\\Projects\\\\ficha\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"D:\\\\Projects\\\\ficha\\\\src\\\\components\\\\LugarFechaNacimiento.jsx\";\nimport React from \"react\";\nimport { Form, Select, DatePicker, Layout } from \"antd\";\nimport moment from \"moment\";\nconst Option = Select.Option; // const apiUrl = 'https://net.upt.edu.pe/FichaDatos/FichaWeb/modules';\n\nconst apiUrl = \"http://192.168.0.5/FichaDatos/FichaWeb/modules\";\n\nclass LugarFechaNacimiento extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.siguiente = e => {\n      e.preventDefault();\n\n      if (this.state.edadValida) {\n        this.props.siguiente();\n      }\n    };\n\n    this.regresar = e => {\n      e.preventDefault();\n      this.props.regresar();\n    };\n\n    this.validarEdad = () => {\n      let a = Math.floor(moment(new Date()).diff(moment(\"07/25/2003\"), \"years\", true));\n    };\n\n    this.getCiudades = async () => {\n      // const response = await fetch(\n      //   `${apiUrl}/Ciudad.php?p=read&session=${this.state.session}&CodUniv=${\n      //     this.state.cod_univ\n      //   }&idPais=${this.state.ficha.id_nac_pais_per}`\n      // );\n      // const response = await fetch(\n      //   `${apiUrl}/Ciudad.php?p=read&session=${this.state.session}&CodUniv=${\n      //     this.state.cod_univ\n      //   }`\n      // );\n      // const data = await response.json();\n      // await this.setState({\n      //   ciudades: data,\n      //   ficha: {\n      //     ...this.state.ficha,\n      //     id_nac_ciudad_per: data[0].CodCiudad\n      //   }\n      // });\n      const ciudades = [];\n\n      for (let index = 0; index < this.state.ciudadesNac.length; index++) {\n        if (this.state.ciudadesNac[index].relacion == this.state.ficha.id_nac_pais_per) {\n          ciudades.push(this.state.ciudadesNac[index]);\n        }\n      }\n\n      if (ciudades.length > 0) {\n        await this.setState({\n          ciudades: ciudades\n        });\n      } else {\n        await this.setState({\n          ciudades: [],\n          ficha: _objectSpread({}, this.state.ficha, {\n            id_nac_ciudad_per: \"-------\",\n            id_nac_provincia_per: \"-------\"\n          })\n        });\n      }\n    };\n\n    this.getProvincias = async () => {\n      // const response = await fetch(\n      //   `${apiUrl}/Provincia.php?p=read&session=${this.state.session}&CodUniv=${\n      //     this.state.cod_univ\n      //   }&idCiudad=${this.state.ficha.id_nac_ciudad_per}`\n      // );\n      // const data = await response.json();\n      // await this.setState({\n      //   provincias: data,\n      //   ficha: {\n      //     ...this.state.ficha,\n      //     id_nac_provincia_per: data[0].CodProv\n      //   }\n      // });\n      const provincias = [];\n\n      for (let index = 0; index < this.state.provinciasNac.length; index++) {\n        if (this.state.provinciasNac[index].relacion == this.state.ficha.id_nac_ciudad_per) {\n          provincias.push(this.state.provinciasNac[index]);\n        }\n      }\n\n      if (provincias.length > 0) {\n        await this.setState({\n          provincias: provincias\n        });\n      }\n    };\n\n    this.getDistritos = async () => {\n      // const response = await fetch(\n      //   `${apiUrl}/Distrito.php?p=read&session=${this.state.session}&CodUniv=${\n      //     this.state.cod_univ\n      //   }&idPais=9589&idCiudad=${\n      //     this.state.ficha.id_nac_ciudad_per\n      //   }&idProvincia=${this.state.ficha.id_nac_provincia_per}`\n      // );\n      // const data = await response.json();\n      // await this.setState({\n      //   distritos: data,\n      //   ficha: {\n      //     ...this.state.ficha,\n      //     id_nac_distrito_per: data[0].CodDist\n      //   }\n      // });\n      const distritos = [];\n\n      for (let index = 0; index < this.state.distritosNac.length; index++) {\n        if (this.state.distritosNac[index].CodDistProv == this.state.ficha.id_nac_provincia_per) {\n          distritos.push(this.state.distritosNac[index]);\n        }\n      }\n\n      if (distritos.length > 0) {\n        await this.setState({\n          distritos: distritos\n        });\n      }\n    };\n\n    this.handleSelectedPais = async e => {\n      await this.setState({\n        ficha: _objectSpread({}, this.state.ficha, {\n          id_nac_pais_per: e\n        })\n      });\n      await this.getCiudades();\n    };\n\n    this.handleSelectedCiudad = async e => {\n      await this.setState({\n        ficha: _objectSpread({}, this.state.ficha, {\n          id_nac_ciudad_per: e\n        })\n      });\n      await this.getProvincias();\n    };\n\n    this.handleSelectedProvincia = async e => {\n      await this.setState({\n        ficha: _objectSpread({}, this.state.ficha, {\n          id_nac_provincia_per: e\n        })\n      });\n      await this.getDistritos();\n    };\n\n    this.state = {\n      ficha: \"\",\n      paises: [],\n      ciudades: [],\n      provincias: [],\n      distritos: [],\n      ciudadesNac: [],\n      provinciasNac: [],\n      distritosNac: [],\n      session: this.props.session,\n      cod_univ: this.props.cod_univ,\n      cod_ciudad: 2919,\n      cod_provincia: 2101,\n      cod_distrito: 210101,\n      edadValida: false\n    };\n  }\n\n  async componentDidMount() {\n    const _this$props = this.props,\n          ficha = _this$props.ficha,\n          paises = _this$props.paises,\n          ciudades = _this$props.ciudades,\n          provincias = _this$props.provincias,\n          distritos = _this$props.distritos;\n    await this.setState({\n      paises: paises,\n      ciudadesNac: ciudades,\n      provinciasNac: provincias,\n      distritosNac: distritos,\n      ficha: ficha\n    });\n    await this.getCiudades();\n    await this.getProvincias();\n    await this.getDistritos();\n    await this.validarEdad();\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          handleChangeSelect = _this$props2.handleChangeSelect,\n          handleChangeDatePicker = _this$props2.handleChangeDatePicker;\n    const _this$state = this.state,\n          ficha = _this$state.ficha,\n          paises = _this$state.paises,\n          ciudades = _this$state.ciudades,\n          provincias = _this$state.provincias,\n          distritos = _this$state.distritos;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const dateFormat = \"YYYY-DD-MM\"; // const dateFormat2 = [\"DD-MM-YYYY\", \"DD-MM-YY\"];\n\n    return React.createElement(Layout, {\n      style: {\n        background: \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(Form, Object.assign({}, formItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"Fecha de Nacimiento\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, getFieldDecorator(\"fechaNac\", {\n      initialValue: ficha.fch_nacimiento_per === \"\" ? moment(\"1999-11-25\", dateFormat) : moment(ficha.fch_nacimiento_per, dateFormat),\n      rules: [{\n        type: \"object\",\n        required: true,\n        message: \"Por favor seleccione la fecha de su nacimiento\"\n      }]\n    })(React.createElement(DatePicker, {\n      defaultPickerValue: moment(ficha.fch_nacimiento_per),\n      placeholder: \"25-11-1999\" // format={dateFormat2}\n      ,\n      onChange: handleChangeDatePicker(\"fch_nacimiento_per\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Pa\\xEDs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, getFieldDecorator(\"pais\", {\n      initialValue: ficha.id_nac_pais_per === \"\" || ficha.id_nac_pais_per == null ? 9589 : ficha.id_nac_pais_per,\n      rules: [{\n        required: true,\n        message: \"Por favor seleccione el país.\"\n      }]\n    })(React.createElement(Select, {\n      placeholder: \"Perú\",\n      onChange: handleChangeSelect(\"id_nac_pais_per\"),\n      onSelect: this.handleSelectedPais,\n      showSearch: true,\n      optionFilterProp: \"children\",\n      filterOption: (input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, paises.map(pais => React.createElement(Option, {\n      value: pais.CodNac,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, pais.Descripcion))))), React.createElement(Form.Item, {\n      label: \"Ciudad\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, getFieldDecorator(\"ciudad\", {\n      initialValue: ficha.id_nac_ciudad_per == null ? 2919 : ficha.id_nac_ciudad_per,\n      rules: [{\n        required: true,\n        message: \"Por favor seleccione la ciudad.\"\n      }]\n    })(React.createElement(Select, {\n      placeholder: \"Seleccione ciudad\",\n      onChange: handleChangeSelect(\"id_nac_ciudad_per\"),\n      onSelect: this.handleSelectedCiudad,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, ciudades.map(ciudad => React.createElement(Option, {\n      value: ciudad.CodCiudad,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, ciudad.descripcion))))), React.createElement(Form.Item, {\n      label: \"Provincia\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, getFieldDecorator(\"provincia\", {\n      initialValue: ficha.id_nac_provincia_per == null ? 2301 : ficha.id_nac_provincia_per,\n      rules: [{\n        required: true,\n        message: \"Por favor seleccione la provincia.\"\n      }]\n    })(React.createElement(Select, {\n      placeholder: \"Seleccione la provincia\",\n      onChange: handleChangeSelect(\"id_nac_provincia_per\"),\n      onSelect: this.handleSelectedProvincia,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, provincias.map(provincia => React.createElement(Option, {\n      value: provincia.CodProv,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, provincia.descripcion))))), React.createElement(Form.Item, {\n      label: \"Distrito\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, getFieldDecorator(\"distrito\", {\n      initialValue: ficha.id_nac_distrito_per == null ? 2301 : ficha.id_nac_distrito_per,\n      rules: [{\n        required: true,\n        message: \"Por favor seleccione el distrito.\"\n      }]\n    })(React.createElement(Select, {\n      placeholder: \"Seleccione el distrito\",\n      onChange: handleChangeSelect(\"id_nac_distrito_per\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, distritos.map(distrito => React.createElement(Option, {\n      value: distrito.CodDist,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, distrito.descripcion)))))));\n  }\n\n}\n\nexport default Form.create()(LugarFechaNacimiento);","map":{"version":3,"sources":["D:\\Projects\\ficha\\src\\components\\LugarFechaNacimiento.jsx"],"names":["React","Form","Select","DatePicker","Layout","moment","Option","apiUrl","LugarFechaNacimiento","Component","constructor","props","siguiente","e","preventDefault","state","edadValida","regresar","validarEdad","a","Math","floor","Date","diff","getCiudades","ciudades","index","ciudadesNac","length","relacion","ficha","id_nac_pais_per","push","setState","id_nac_ciudad_per","id_nac_provincia_per","getProvincias","provincias","provinciasNac","getDistritos","distritos","distritosNac","CodDistProv","handleSelectedPais","handleSelectedCiudad","handleSelectedProvincia","paises","session","cod_univ","cod_ciudad","cod_provincia","cod_distrito","componentDidMount","render","handleChangeSelect","handleChangeDatePicker","formItemLayout","labelCol","xs","span","sm","wrapperCol","getFieldDecorator","form","dateFormat","background","initialValue","fch_nacimiento_per","rules","type","required","message","input","option","children","toLowerCase","indexOf","map","pais","CodNac","Descripcion","ciudad","CodCiudad","descripcion","provincia","CodProv","id_nac_distrito_per","distrito","CodDist","create"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Form, Select, DatePicker, Layout } from \"antd\";\nimport moment from \"moment\";\n\nconst { Option } = Select;\n\n// const apiUrl = 'https://net.upt.edu.pe/FichaDatos/FichaWeb/modules';\nconst apiUrl = \"http://192.168.0.5/FichaDatos/FichaWeb/modules\";\n\nclass LugarFechaNacimiento extends React.Component {\n  siguiente = e => {\n    e.preventDefault();\n\n    if (this.state.edadValida) {\n      this.props.siguiente();\n    }\n  };\n\n  regresar = e => {\n    e.preventDefault();\n    this.props.regresar();\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ficha: \"\",\n      paises: [],\n      ciudades: [],\n      provincias: [],\n      distritos: [],\n      ciudadesNac: [],\n      provinciasNac: [],\n      distritosNac: [],\n      session: this.props.session,\n      cod_univ: this.props.cod_univ,\n      cod_ciudad: 2919,\n      cod_provincia: 2101,\n      cod_distrito: 210101,\n      edadValida: false\n    };\n  }\n\n  async componentDidMount() {\n    const { ficha, paises, ciudades, provincias, distritos } = this.props;\n\n    await this.setState({\n      paises: paises,\n      ciudadesNac: ciudades,\n      provinciasNac: provincias,\n      distritosNac: distritos,\n      ficha: ficha\n    });\n\n    await this.getCiudades();\n    await this.getProvincias();\n    await this.getDistritos();\n    await this.validarEdad();\n  }\n\n  validarEdad = () => {\n    let a = Math.floor(\n      moment(new Date()).diff(moment(\"07/25/2003\"), \"years\", true)\n    );\n  };\n\n  // getPaises = async () => {\n  //   const response = await fetch(\n  //     `${apiUrl}/Nacionalidad.php?p=read&session=${\n  //       this.state.session\n  //     }&CodUniv=${this.state.cod_univ}`\n  //   );\n\n  //   const data = await response.json();\n  //   this.setState({\n  //     nacionalidades: data\n  //   });\n  // };\n\n  getCiudades = async () => {\n    // const response = await fetch(\n    //   `${apiUrl}/Ciudad.php?p=read&session=${this.state.session}&CodUniv=${\n    //     this.state.cod_univ\n    //   }&idPais=${this.state.ficha.id_nac_pais_per}`\n    // );\n    // const response = await fetch(\n    //   `${apiUrl}/Ciudad.php?p=read&session=${this.state.session}&CodUniv=${\n    //     this.state.cod_univ\n    //   }`\n    // );\n    // const data = await response.json();\n    // await this.setState({\n    //   ciudades: data,\n    //   ficha: {\n    //     ...this.state.ficha,\n    //     id_nac_ciudad_per: data[0].CodCiudad\n    //   }\n    // });\n\n    const ciudades = [];\n\n    for (let index = 0; index < this.state.ciudadesNac.length; index++) {\n      if (\n        this.state.ciudadesNac[index].relacion ==\n        this.state.ficha.id_nac_pais_per\n      ) {\n        ciudades.push(this.state.ciudadesNac[index]);\n      }\n    }\n\n    if (ciudades.length > 0) {\n      await this.setState({\n        ciudades: ciudades\n      });\n    } else {\n      await this.setState({\n        ciudades: [],\n        ficha: {\n          ...this.state.ficha,\n          id_nac_ciudad_per: \"-------\",\n          id_nac_provincia_per: \"-------\"\n        }\n      });\n    }\n  };\n\n  getProvincias = async () => {\n    // const response = await fetch(\n    //   `${apiUrl}/Provincia.php?p=read&session=${this.state.session}&CodUniv=${\n    //     this.state.cod_univ\n    //   }&idCiudad=${this.state.ficha.id_nac_ciudad_per}`\n    // );\n    // const data = await response.json();\n    // await this.setState({\n    //   provincias: data,\n    //   ficha: {\n    //     ...this.state.ficha,\n    //     id_nac_provincia_per: data[0].CodProv\n    //   }\n    // });\n    const provincias = [];\n    for (let index = 0; index < this.state.provinciasNac.length; index++) {\n      if (\n        this.state.provinciasNac[index].relacion ==\n        this.state.ficha.id_nac_ciudad_per\n      ) {\n        provincias.push(this.state.provinciasNac[index]);\n      }\n    }\n    if (provincias.length > 0) {\n      await this.setState({\n        provincias: provincias\n      });\n    }\n  };\n\n  getDistritos = async () => {\n    // const response = await fetch(\n    //   `${apiUrl}/Distrito.php?p=read&session=${this.state.session}&CodUniv=${\n    //     this.state.cod_univ\n    //   }&idPais=9589&idCiudad=${\n    //     this.state.ficha.id_nac_ciudad_per\n    //   }&idProvincia=${this.state.ficha.id_nac_provincia_per}`\n    // );\n    // const data = await response.json();\n    // await this.setState({\n    //   distritos: data,\n    //   ficha: {\n    //     ...this.state.ficha,\n    //     id_nac_distrito_per: data[0].CodDist\n    //   }\n    // });\n\n    const distritos = [];\n    for (let index = 0; index < this.state.distritosNac.length; index++) {\n      if (\n        this.state.distritosNac[index].CodDistProv ==\n        this.state.ficha.id_nac_provincia_per\n      ) {\n        distritos.push(this.state.distritosNac[index]);\n      }\n    }\n    if (distritos.length > 0) {\n      await this.setState({\n        distritos: distritos\n      });\n    }\n  };\n\n  handleSelectedPais = async e => {\n    await this.setState({\n      ficha: {\n        ...this.state.ficha,\n        id_nac_pais_per: e\n      }\n    });\n    await this.getCiudades();\n  };\n\n  handleSelectedCiudad = async e => {\n    await this.setState({\n      ficha: {\n        ...this.state.ficha,\n        id_nac_ciudad_per: e\n      }\n    });\n    await this.getProvincias();\n  };\n\n  handleSelectedProvincia = async e => {\n    await this.setState({\n      ficha: {\n        ...this.state.ficha,\n        id_nac_provincia_per: e\n      }\n    });\n    await this.getDistritos();\n  };\n\n  render() {\n    const { handleChangeSelect, handleChangeDatePicker } = this.props;\n\n    const { ficha, paises, ciudades, provincias, distritos } = this.state;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 }\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 }\n      }\n    };\n\n    const { getFieldDecorator } = this.props.form;\n    const dateFormat = \"YYYY-DD-MM\";\n    // const dateFormat2 = [\"DD-MM-YYYY\", \"DD-MM-YY\"];\n\n    return (\n      <Layout style={{ background: \"white\" }}>\n        <Form {...formItemLayout}>\n          <Form.Item label=\"Fecha de Nacimiento\">\n            {getFieldDecorator(\"fechaNac\", {\n              initialValue:\n                ficha.fch_nacimiento_per === \"\"\n                  ? moment(\"1999-11-25\", dateFormat)\n                  : moment(ficha.fch_nacimiento_per, dateFormat),\n              rules: [\n                {\n                  type: \"object\",\n                  required: true,\n                  message: \"Por favor seleccione la fecha de su nacimiento\"\n                }\n              ]\n            })(\n              <DatePicker\n                defaultPickerValue={moment(ficha.fch_nacimiento_per)}\n                placeholder={\"25-11-1999\"}\n                // format={dateFormat2}\n                onChange={handleChangeDatePicker(\"fch_nacimiento_per\")}\n              />\n            )}\n          </Form.Item>\n\n          <Form.Item label=\"País\">\n            {getFieldDecorator(\"pais\", {\n              initialValue:\n                ficha.id_nac_pais_per === \"\" || ficha.id_nac_pais_per == null\n                  ? 9589\n                  : ficha.id_nac_pais_per,\n              rules: [\n                {\n                  required: true,\n                  message: \"Por favor seleccione el país.\"\n                }\n              ]\n            })(\n              <Select\n                placeholder={\"Perú\"}\n                onChange={handleChangeSelect(\"id_nac_pais_per\")}\n                onSelect={this.handleSelectedPais}\n                showSearch={true}\n                optionFilterProp={\"children\"}\n                filterOption={(input, option) =>\n                  option.props.children\n                    .toLowerCase()\n                    .indexOf(input.toLowerCase()) >= 0\n                }\n              >\n                {paises.map(pais => (\n                  <Option value={pais.CodNac}>{pais.Descripcion}</Option>\n                ))}\n              </Select>\n            )}\n          </Form.Item>\n          <Form.Item label=\"Ciudad\">\n            {getFieldDecorator(\"ciudad\", {\n              initialValue:\n                ficha.id_nac_ciudad_per == null\n                  ? 2919\n                  : ficha.id_nac_ciudad_per,\n              rules: [\n                {\n                  required: true,\n                  message: \"Por favor seleccione la ciudad.\"\n                }\n              ]\n            })(\n              <Select\n                placeholder={\"Seleccione ciudad\"}\n                onChange={handleChangeSelect(\"id_nac_ciudad_per\")}\n                onSelect={this.handleSelectedCiudad}\n              >\n                {ciudades.map(ciudad => (\n                  <Option value={ciudad.CodCiudad}>{ciudad.descripcion}</Option>\n                ))}\n              </Select>\n            )}\n          </Form.Item>\n          <Form.Item label=\"Provincia\">\n            {getFieldDecorator(\"provincia\", {\n              initialValue:\n                ficha.id_nac_provincia_per == null\n                  ? 2301\n                  : ficha.id_nac_provincia_per,\n              rules: [\n                {\n                  required: true,\n                  message: \"Por favor seleccione la provincia.\"\n                }\n              ]\n            })(\n              <Select\n                placeholder={\"Seleccione la provincia\"}\n                onChange={handleChangeSelect(\"id_nac_provincia_per\")}\n                onSelect={this.handleSelectedProvincia}\n              >\n                {provincias.map(provincia => (\n                  <Option value={provincia.CodProv}>\n                    {provincia.descripcion}\n                  </Option>\n                ))}\n              </Select>\n            )}\n          </Form.Item>\n          <Form.Item label=\"Distrito\">\n            {getFieldDecorator(\"distrito\", {\n              initialValue:\n                ficha.id_nac_distrito_per == null\n                  ? 2301\n                  : ficha.id_nac_distrito_per,\n              rules: [\n                {\n                  required: true,\n                  message: \"Por favor seleccione el distrito.\"\n                }\n              ]\n            })(\n              <Select\n                placeholder={\"Seleccione el distrito\"}\n                onChange={handleChangeSelect(\"id_nac_distrito_per\")}\n              >\n                {distritos.map(distrito => (\n                  <Option value={distrito.CodDist}>\n                    {distrito.descripcion}\n                  </Option>\n                ))}\n              </Select>\n            )}\n          </Form.Item>\n        </Form>\n      </Layout>\n    );\n  }\n}\n\nexport default Form.create()(LugarFechaNacimiento);\n"]},"metadata":{},"sourceType":"module"}